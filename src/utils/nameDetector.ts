
import { DetectedPattern } from './patternDetection';
import { NAME_PATTERNS, isValidNameWord, isBrazilianName, NON_NAME_WORDS } from './namePatterns';

export interface NameValidationResult {
  isValid: boolean;
  confidence: number;
  reason?: string;
  isBrazilian?: boolean;
}

export class NameDetector {
  private static detectedNames = new Set<string>();
  
  // Detectar nomes usando m√∫ltiplas estrat√©gias
  static detectNames(text: string): DetectedPattern[] {
    const patterns: DetectedPattern[] = [];
    this.detectedNames.clear();
    
    console.log('üîç Iniciando detec√ß√£o avan√ßada de nomes brasileiros...');
    
    // Estrat√©gia 1: Nomes em mai√∫sculo (rigoroso)
    this.detectByPattern(text, NAME_PATTERNS.UPPERCASE_STRICT, 'uppercase-strict', patterns);
    
    // Estrat√©gia 2: Nomes em mai√∫sculo (flex√≠vel)
    this.detectByPattern(text, NAME_PATTERNS.UPPERCASE_FLEXIBLE, 'uppercase-flexible', patterns);
    
    // Estrat√©gia 3: Nomes mistos
    this.detectByPattern(text, NAME_PATTERNS.MIXED_CASE, 'mixed-case', patterns);
    
    // Estrat√©gia 4: Nomes por contexto
    this.detectContextualNames(text, patterns);
    
    // Remover duplicatas e ordenar por posi√ß√£o
    const uniquePatterns = this.removeDuplicates(patterns);
    
    console.log(`üéØ Total de nomes √∫nicos detectados: ${uniquePatterns.length}`);
    uniquePatterns.forEach(pattern => {
      console.log(`- ${pattern.value} (confian√ßa: ${pattern.confidence}, m√©todo: ${(pattern as any).method || 'unknown'})`);
    });
    
    return uniquePatterns.sort((a, b) => a.startIndex - b.startIndex);
  }
  
  // Detectar nomes usando uma regex espec√≠fica
  private static detectByPattern(
    text: string, 
    regex: RegExp, 
    method: string, 
    patterns: DetectedPattern[]
  ): void {
    regex.lastIndex = 0;
    let match;
    
    while ((match = regex.exec(text)) !== null) {
      const nameValue = match[1] || match[0];
      const cleanName = nameValue.trim();
      
      if (this.detectedNames.has(cleanName)) {
        continue; // J√° detectado
      }
      
      const validation = this.validateNameCandidate(cleanName, method);
      
      if (validation.isValid) {
        patterns.push({
          type: 'name',
          value: cleanName,
          startIndex: match.index + (match[0].indexOf(cleanName)),
          endIndex: match.index + match[0].length,
          confidence: validation.confidence,
          ...{ method } // Adicionar m√©todo para debug
        });
        
        this.detectedNames.add(cleanName);
        console.log(`‚úÖ Nome detectado (${method}): "${cleanName}" (confian√ßa: ${validation.confidence})`);
      } else {
        console.log(`‚ùå Nome rejeitado (${method}): "${cleanName}" - ${validation.reason}`);
      }
    }
  }
  
  // Detectar nomes por contexto
  private static detectContextualNames(text: string, patterns: DetectedPattern[]): void {
    const regex = NAME_PATTERNS.CONTEXTUAL;
    regex.lastIndex = 0;
    let match;
    
    while ((match = regex.exec(text)) !== null) {
      const nameValue = match[1].trim();
      
      if (this.detectedNames.has(nameValue)) {
        continue;
      }
      
      const words = nameValue.split(/\s+/);
      
      // Validar se parece um nome v√°lido
      if (words.length >= 2 && words.length <= 6 && words.every(isValidNameWord)) {
        const endIndex = match.index + match[0].length;
        const startIndex = endIndex - nameValue.length;
        
        patterns.push({
          type: 'name',
          value: nameValue,
          startIndex,
          endIndex,
          confidence: 0.95, // Alta confian√ßa para nomes encontrados por contexto
          ...{ method: 'contextual' }
        });
        
        this.detectedNames.add(nameValue);
        console.log(`‚úÖ Nome detectado (contexto): "${nameValue}" (confian√ßa: 0.95)`);
      }
    }
  }
  
  // Validar se um candidato √© realmente um nome
  private static validateNameCandidate(nameValue: string, strategy: string): NameValidationResult {
    const words = nameValue.trim().split(/\s+/);
    
    // Filtros b√°sicos
    if (words.length < 2) {
      return { isValid: false, confidence: 0, reason: 'Menos de 2 palavras' };
    }
    
    if (words.length > 6) {
      return { isValid: false, confidence: 0, reason: 'Mais de 6 palavras (muito longo)' };
    }
    
    // Verificar se todas as palavras s√£o v√°lidas
    const invalidWords = words.filter(word => !isValidNameWord(word));
    if (invalidWords.length > 0) {
      return { 
        isValid: false, 
        confidence: 0, 
        reason: `Palavras inv√°lidas: ${invalidWords.join(', ')}` 
      };
    }
    
    // Verificar se cont√©m palavras que definitivamente n√£o s√£o nomes
    const hasNonNameWord = words.some(word => 
      NON_NAME_WORDS.includes(word.toUpperCase())
    );
    
    if (hasNonNameWord) {
      return { isValid: false, confidence: 0, reason: 'Cont√©m palavra n√£o-nome' };
    }
    
    // Verificar se parece com t√≠tulo de documento
    const fullName = nameValue.toUpperCase();
    const documentTitles = ['CONTRATO', 'DOCUMENTO', 'ANEXO', 'CL√ÅUSULA', 'PRE√ÇMBULO'];
    if (documentTitles.some(title => fullName.includes(title))) {
      return { isValid: false, confidence: 0, reason: 'Parece t√≠tulo de documento' };
    }
    
    // Verificar se √© um nome brasileiro t√≠pico
    const isBrazilian = isBrazilianName(words);
    
    // Calcular confian√ßa baseada na estrat√©gia e caracter√≠sticas
    let confidence = 0.70; // Base
    
    if (isBrazilian) {
      confidence += 0.20; // Bonus para nomes brasileiros t√≠picos
    }
    
    if (strategy === 'uppercase-strict' && words.length >= 3) {
      confidence += 0.10; // Bonus para nomes completos em mai√∫sculo
    }
    
    if (strategy === 'contextual') {
      confidence += 0.15; // Bonus para nomes encontrados por contexto
    }
    
    // Limitar confian√ßa m√°xima
    confidence = Math.min(0.98, confidence);
    
    return { 
      isValid: true, 
      confidence, 
      isBrazilian 
    };
  }
  
  // Remover padr√µes duplicados
  private static removeDuplicates(patterns: DetectedPattern[]): DetectedPattern[] {
    const seen = new Map<string, DetectedPattern>();
    
    for (const pattern of patterns) {
      const existing = seen.get(pattern.value);
      if (!existing || pattern.confidence > existing.confidence) {
        seen.set(pattern.value, pattern);
      }
    }
    
    return Array.from(seen.values());
  }
}
